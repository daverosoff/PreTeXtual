%YAML 1.2
---
name: PreTeXt
file_extensions:
  - ptx
  # legacy
  - mbx
first_line_match: |-
    (?x)
    ^(?:
        <\?xml\s
     |  \s*<([\w-]+):Envelope\s+xmlns:\1\s*=\s*"http://schemas.xmlsoap.org/soap/envelope/"\s*>
     )
scope: text.xml.pretext
variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'
  division: '(part|chapter|(?:sub)*section(?=[^>-])|appendix|introduction|conclusion|exercises|solutions|references|paragraphs|commentary)'
  # Issue: there are two kinds of references and two kinds of colophon
  frontmatter: '(frontmatter|titlepage|colophon|abstract|author|contributor|personname|department|institution|email|credit|date|role|entity|edition|website|copyright|year|holder|minilicense|shortlicense|biography|dedication|acknowledgement|preface)'
  backmatter: '(backmatter|index|colophon)'
  aside_like: '(aside|biographical|historical)'
  axiom_like: '(axiom|conjecture|principle|heuristic|hypothesis|assumption)'
  computation_like: '(computation|technology)'
  definition_like: '(definition)'
  # strange terminator for sub*section because - matched \b; need lookahead to not consume space which need
  # to match tag-stuff
  example_like: '(example|question|problem)'
  exercise_like: '(exercise)(?=\b)'
  remark_like: '(remark|convention|note|observation|warning|insight)'
  project_like: '(project|activity|exploration|investigation|task)'
  theorem_like: '(theorem|corollary|lemma|algorithm|proposition|claim|fact|identity)'
  footnote: '(fn)'
  character_delimiter: '([lr]s?q)'
  # They are all dashes in the PTX schema, as of 2019-07-23
  character_dash: '(nbsp|ndash|mdash)'
  # The copyright character needs separate handling because of the nonempty copyright
  # element that can occur in the front matter
  character_exotic: '(ellipsis|midpoint|swungdash|permille|pilcrow|section-mark|registered|trademark)'
  character_escape_xml: '(greater-than|less-than|ampersand|squote|quote)'
  character_escape_latex: '(hash|dollar|percent|tilde|underscore|circumflex|backslash|lbrace|rbrace)'
  character_fillin: '(fillin)'
  character_arithmetic: '(solidus|times)'
  character_icon: ('icon')
  character_music: '(doublesharp|sharp|natural|flat|doubleflat|scaledeg|n(?=\s)|chord|alteration)'
  generator: '(today|timeofday|tex|latex(?=\s)|pretext|webwork|ad|am|bc|circa|eg|etal|etc|ie|np|pm|ps|vs|viz)'
  siunit: '(quantity|mag|unit|per(?=\b))'
  verbatim: '(c(?=\s)|email)'
  # sage and program tags are handled separately due to @language
  verbatimdisplay: '(cd|cline|pre(?=\s)|console|prompt|input|output)'
  interactive: '(jsxgraph|musescore)'
  latex_image: '(latex-image(?:-preamble)?)'
  # index: '(index|h(?=\s)|idx|index-list|index-part)'
  # index_tag: '(idx)'
  index_content: '(see(?:also)?|h(?=\b))'
  block_component: '(prelude|interlude|postlude|statement|hint|answer|solution)'
  paragraph: '(p(?=\b)|line)'

contexts:
  main:
    - match: '(</?)({{axiom_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.axiom-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{computation_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.computation-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(<)({{definition_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.definition-like.pretext
        - match: '(>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{example_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.example-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{exercise_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.exercise-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{remark_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.remark-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{division}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.structure.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.division.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{frontmatter}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.structure.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.frontmatter.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{backmatter}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.structure.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.backmatter.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{aside_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.aside-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{theorem_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.theorem-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{project_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.project-like.pretext
        - match: '(/?>)'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{footnote}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.structure.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.footnote.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(notation)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.reference.notation.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(usage)[^>]*(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.block.any.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext markup.other.math.notation.pretext
      push:
        - meta_scope: text.tex.latex.pretext
        - include: 'scope:text.tex.latex'
        - include: single-quoted-string
        - include: double-quoted-string
        - match: '(</)(\2)(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.math.display.pretext
          pop: true
    - match: '(<)(xref)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.reference.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.reference.xref.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(<)(url)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.reference.any.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.reference.url.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    # - match: '(</?)(md|me|mdn|men)(?=\s)'
    #   captures:
    #     1: punctuation.definition.tag.begin.pretext
    #     2: entity.name.tag.localname.pretext
    #   push:
    #     - meta_scope: meta.tag.pretext markup.other.math.display.pretext
    #     - match: '/?>'
    #       scope: punctuation.definition.tag.end.pretext
    #       pop: true
    #     - include: single-quoted-string
    #     - include: double-quoted-string
    #     - include: tag-stuff
    # - match: '(</?)(mrow)'
    #   captures:
    #     1: punctuation.definition.tag.begin.pretext
    #     2: entity.name.tag.localname.pretext
    #   push:
    #     - meta_scope: meta.tag.pretext markup.other.math.display.mrow.pretext
    #     - match: '/?>'
    #       scope: punctuation.definition.tag.end.pretext
    #       pop: true
    #     - include: single-quoted-string
    #     - include: double-quoted-string
    #     - include: tag-stuff
    # - match: '(</?)(m)(?=\s)'
    #   captures:
    #     1: punctuation.definition.tag.begin.pretext
    #     2: entity.name.tag.localname.pretext
    #   push:
    #     - meta_scope: meta.tag.pretext markup.other.math.inline.pretext
    #     - match: '/?>'
    #       scope: punctuation.definition.tag.end.pretext
    #       pop: true
    #     - include: single-quoted-string
    #     - include: double-quoted-string
    #     - include: tag-stuff
    - match: '(</?)(title)(?=\s)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.heading.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(caption)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.caption.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(<)(idx)[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext markup.other.index.begin.pretext
      push:
        - meta_content_scope: markup.other.index.content.pretext
        - match: '(</?)({{index_content}})'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            0: meta.tag.pretext markup.other.index.end.pretext
          push:
            - match: '/?>'
              scope: punctuation.definition.tag.end.pretext
              pop: true
        - match: '(</)(\2)(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.index.end.pretext
          pop: true
        # - include: single-quoted-string
        # - include: double-quoted-string
        # - include: tag-stuff
    - match: '(</?)(list)(?=\s)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(ol)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.numbered.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(ul)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.unnumbered.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(dl)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.named.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(li)(?=\b)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.item.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(dl)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.list.definitional.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(abbr|acro|init(?=\b))'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.abbreviation-group.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(q(?=\s)|sq(?=\s)|braces|angles|dblbrackets)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.delimiter-group.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(em(?=\s)|term|alert|pubtitle|articletitle|foreign)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.highlight-group.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(delete|insert|stale)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.editing-group.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(taxon|genus|species)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.scientific-name-group.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{block_component}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.block-component.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{paragraph}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.paragraph.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{verbatim}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.verbatim.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{verbatimdisplay}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.verbatimdisplay.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(figure)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.figure.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(table)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.table.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(listing)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.listing.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(image)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.image.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(poem)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.poem.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(video)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.video.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(mdn?)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.math.multiline.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(<)(mrow|me(?=\b)|men)[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext markup.other.math.display.pretext
      push:
        - meta_scope: text.tex.latex.pretext
        - include: 'scope:text.tex.latex'
        - include: single-quoted-string
        - include: double-quoted-string
        # - match: '(<)(var)(>)'
        #   captures:
        #     1: punctuation.definition.tag.begin.pretext
        #     2: entity.name.tag.localname.pretext
        #     3: punctuation.definition.tag.end.pretext
        #     0: meta.tag.pretext markup.other.dwr.temp.pretext
        - match: '(</)(\2)(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.math.display.pretext
          pop: true
    - match: '(<)(m(?=\b))[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext markup.other.math.inline.pretext
      push:
        - meta_scope: text.tex.latex.pretext
        - include: 'scope:text.tex.latex'
        - include: single-quoted-string
        - include: double-quoted-string
        # - include: tag-stuff
      # with_prototype:
        - match: '(</)(\2)(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.math.inline.pretext
          pop: true
    - match: '(</?)(asymptote)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: markup.other.image.asymptote.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
    - match: '(</?)(sageplot)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: markup.other.image.sageplot.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
    - match: '(<)({{latex_image}})[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext markup.other.image.latex.pretext
      push:
        - match: '<!\[CDATA\['
          scope: punctuation.definition.string.begin.pretext
        - match: ']]>'
          scope: punctuation.definition.string.end.pretext
        - meta_content_scope: text.tex.latex.pretext
        - include: 'scope:text.tex.latex'
        - include: single-quoted-string
        - include: double-quoted-string
        - match: '(</)({{latex_image}})(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.image.latex.pretext
          pop: true
    - match: '(<)(macros)[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext
      push:
        - match: '<!\[CDATA\['
          scope: punctuation.definition.string.begin.pretext
        - match: ']]>'
          scope: punctuation.definition.string.end.pretext
        - meta_content_scope: text.tex.latex.pretext
        - include: 'scope:text.tex.latex'
        - include: single-quoted-string
        - include: double-quoted-string
        - match: '(</)(macros)(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.image.latex.pretext
          pop: true
    - match: '(<)(jsxgraph)[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        0: meta.tag.pretext markup.other.interactive.pretext
      push:
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)([^>]*)(/>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.fake.pretext
            3: entity.other.attribute-name.kludge.pretext
            4: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          push:
            - meta_content_scope: source.js.embedded.pretext
            - include: 'scope:source.js'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext markup.other.interactive.pretext
              pop: true
        - match: '(</)(jsxgraph)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext markup.other.interactive.pretext
          pop: true
        - match: '(</?)({{name}})'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
          push:
            - match: '/?>'
              scope: punctuation.definition.tag.end.pretext
              pop: true
            - include: tag-stuff
    - match: '(<)(sage)[^>]*?(language\s*)(=)(\s*"r")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.r.embedded.pretext
            - include: 'scope:source.r'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
            - match: '(</?)(output)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
        - match: '(</)(sage)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    # - match: '(<)(sage)[^>]*?'
    #   captures:
    #     1: punctuation.definition.tag.begin.pretext
    #     2: entity.name.tag.localname.pretext
    #     0: meta.tag.pretext markup.other.interactive.pretext
    #   push:
    #     - match: '/>'
    #       scope: punctuation.definition.tag.end.pretext
    #       pop: true
    #     - match: '(<)(input)[^>]*?(>)'
    #       captures:
    #         1: punctuation.definition.tag.begin.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext
    #     - match: '(</?)(output)(>)'
    #       captures:
    #         1: punctuation.definition.tag.begin.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext
    #     - include: tag-stuff
    #     - match: '>'
    #       scope: punctuation.definition.tag.end.pretext
    #       push:
    #         - meta_content_scope: source.python.sage.embedded.pretext
    #         - include: 'scope:source.python'
    #       with_prototype:
    #         - match: '<!\[CDATA\['
    #           scope: punctuation.definition.string.begin.pretext
    #         - match: ']]>'
    #           scope: punctuation.definition.string.end.pretext
    #         - match: '(</)(input)(>)'
    #           captures:
    #             1: punctuation.definition.tag.begin.pretext
    #             2: entity.name.tag.localname.pretext
    #             3: punctuation.definition.tag.end.pretext
    #             0: meta.tag.pretext
    #           pop: true
    #     - match: '(</)(sage)[^>]*?(>)'
    #       captures:
    #         1: punctuation.definition.tag.begin.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext markup.other.interactive.pretext
    #       pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"python")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.python.embedded.pretext
            - include: 'scope:source.python'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"julia")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.julia.embedded.pretext
            - include: 'scope:source.julia'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"c")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.c.embedded.pretext
            - include: 'scope:source.c'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"cpp")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.c++.embedded.pretext
            - include: 'scope:source.c++'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"r")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.r.embedded.pretext
            - include: 'scope:source.r'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(<)(program)[^>]*?(language\s*)(=)(\s*"xslt")[^>]*?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: entity.other.attribute-name.namespace.pretext
        4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
        5: entity.other.attribute-name.localname.pretext
        0: meta.tag.pretext
      push:
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '(<)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
        - include: tag-stuff
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          push:
            - meta_content_scope: source.xslt.embedded.pretext
            - include: 'scope:text.xml'
          with_prototype:
            - match: '<!\[CDATA\['
              scope: punctuation.definition.string.begin.pretext
            - match: ']]>'
              scope: punctuation.definition.string.end.pretext
            - match: '(</)(input)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              pop: true
        - match: '(</)(program)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    - match: '(</?)({{interactive}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.interactive.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_delimiter}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.delimiter.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_dash}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.dash.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_exotic}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.exotic.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_escape_xml}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.escape.xml.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_escape_latex}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.escape.latex.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_fillin}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.fillin.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_arithmetic}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.arithmetic.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_icon}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.icon.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{character_music}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext constant.character.music.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{generator}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.generator.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)({{siunit}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext markup.other.siunit.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(</?)(geogebra-applet|demonstration)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext invalid.deprecated.badbank.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
    - match: '(<\?)(xml)(?=\s)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.preprocessor.pretext
        - match: \?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '\s+{{qualified_name}}(=)?'
          captures:
            1: entity.other.attribute-name.namespace.pretext
            2: entity.other.attribute-name.pretext punctuation.separator.namespace.pretext
            3: entity.other.attribute-name.localname.pretext
            4: punctuation.separator.key-value.pretext
        - include: double-quoted-string
        - include: single-quoted-string
    - match: '(<!)(DOCTYPE)(?:\s+({{name}}))?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: keyword.doctype.pretext
        3: variable.documentroot.pretext
      push:
        - meta_scope: meta.tag.sgml.doctype.pretext
        - match: \s*(>)
          captures:
            1: punctuation.definition.tag.end.pretext
          pop: true
        - include: internal-subset
    - include: comment
    - match: '(</?){{qualified_name}}([^/>\s]*)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.namespace.pretext
        3: punctuation.separator.namespace.pretext
        4: entity.name.tag.localname.pretext
        5: invalid.illegal.bad-tag-name.pretext
      push:
        - meta_scope: meta.tag.pretext
        - match: /?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: tag-stuff
    - match: '(</?)([[:digit:].-][[:alnum:]:_.-]*)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: invalid.illegal.bad-tag-name.pretext
      push:
        - meta_scope: meta.tag.pretext
        - match: /?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: tag-stuff
    - match: '(<\?)(xml-stylesheet|xml-model)(?=\s|\?>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.preprocessor.pretext
        - match: \?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: tag-stuff
    - match: '(<\?)((?![xX][mM][lL]){{qualified_name}})(?=\s|\?>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.preprocessor.pretext
        - match: \?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
    - include: entity
    - match: '<!\[CDATA\['
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.unquoted.cdata.pretext
        - match: ']]>'
          scope: punctuation.definition.string.end.pretext
          pop: true
    - match: ']]>'
      scope: invalid.illegal.missing-entity.pretext
    - include: should-be-entity
    - include: trailing-whitespace
    - include: tab-character
  embed-javascript:
    - match: '(<)(input)[^>]*?(>)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        3: punctuation.definition.tag.end.pretext
        0: meta.tag.pretext
      push:
        - meta_scope: source.javascript
        - match: '(</)(input)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
  trailing-whitespace:
    - match: '[ ]+$'
      scope: invalid.illegal.trailing-whitespace.pretext
  tab-character:
    - match: '\t'
      scope: invalid.illegal.tab-character.pretext
  should-be-entity:
    - match: '&'
      scope: invalid.illegal.bad-ampersand.pretext
    - match: '<'
      scope: invalid.illegal.missing-entity.pretext
  # pg-dollar-variable:
  #   - match: '(\$)([A-Za-z_][0-9A-Za-z_-])'
  #     scope: punctuation.definition.scalar.dwr.perl.pg
  #     meta_scope: meta.embedded.perl.pg
  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.double.pretext
        - match: '"'
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
        # - include: pg-dollar-variable
  entity:
    - match: '(&)(?:{{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.pretext
      captures:
        1: punctuation.definition.constant.pretext
        2: punctuation.definition.constant.pretext
  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.begin.pretext
      push:
        - meta_scope: comment.block.pretext
        - match: '-->'
          scope: punctuation.definition.comment.end.pretext
          pop: true
        - match: '-{2,}'
          scope: invalid.illegal.double-hyphen-within-comment.pretext
  internal-subset:
    - match: \[
      scope: punctuation.definition.constant.pretext
      push:
        - meta_scope: meta.internalsubset.pretext
        - match: \]
          pop: true
        - include: comment
        - include: entity-decl
        - include: element-decl
        - include: attlist-decl
        - include: notation-decl
        - include: parameter-entity
  entity-decl:
    - match: '(<!)(ENTITY)\s+(%\s+)?({{name}})(\s+(?:SYSTEM|PUBLIC)\s+)?'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: keyword.entity.pretext
        3: punctuation.definition.entity.pretext
        4: variable.entity.pretext
        5: keyword.entitytype.pretext
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
  element-decl:
    - match: '(<!)(ELEMENT)\s+({{name}})\s+'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: keyword.element.pretext
        3: variable.element.pretext
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '\b(EMPTY|ANY)\b'
          scope: constant.other.pretext
        - include: element-parens
  element-parens:
    - match: \(
      scope: punctuation.definition.group.pretext
      push:
        - match: (\))([*?+])?
          captures:
            1: punctuation.definition.group.pretext
            2: keyword.operator.pretext
          pop: true
        - match: '#PCDATA'
          scope: constant.other.pretext
        - match: '[*?+]'
          scope: keyword.operator.pretext
        - match: '[,|]'
          scope: punctuation.separator.pretext
        - include: element-parens
  attlist-decl:
    - match: '(<!)(ATTLIST)\s+({{name}})\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: keyword.attlist.pretext
        3: variable.element.pretext
        4: variable.attribute-name.pretext
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
  notation-decl:
    - match: '(<!)(NOTATION)\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: keyword.notation.pretext
        3: variable.notation.pretext
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
  parameter-entity:
    - match: '(%){{name}}(;)'
      scope: constant.character.parameter-entity.pretext
      captures:
        1: punctuation.definition.constant.pretext
        2: punctuation.definition.constant.pretext
  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.single.pretext
        - match: "'"
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
  tag-stuff:
    - match: '(?:\s+|^){{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.pretext
        2: entity.other.attribute-name.pretext punctuation.separator.namespace.pretext
        3: entity.other.attribute-name.localname.pretext
        4: punctuation.separator.key-value.pretext
    - match: '(?:\s+|^)([[:alnum:]:_.-]+)\s*(=)'
      captures:
        1: invalid.illegal.bad-attribute-name.pretext
        2: punctuation.separator.key-value.pretext
    - include: single-quoted-string
    - include: double-quoted-string
  index-content:
    - match: '(</?)({{index_content}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push:
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: single-quoted-string
        - include: double-quoted-string
        - include: tag-stuff
